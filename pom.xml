<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

    <!--声明项目描述符遵循哪一个POM模型版本。模型本身的版本很少改变，虽然如此，但它仍然是必不可少的，这是为了当Maven引入了新的特性或者其他模型变更的时候，确保稳定性。-->
    <modelVersion>4.0.0</modelVersion>

    <!-- 公司或者组织的唯一标志，并且配置时生成的路径也是由此生成 -->
    <groupId>com.cxy</groupId>
    <!-- 本项目的唯一ID，一个groupId下面可能多个项目，就是靠artifactId来区分的 -->
    <artifactId>platform</artifactId>
    <version>1.0.0</version>
    <!-- 打包的机制，如pom,jar, maven-plugin, ejb, war, ear, rar, par，默认为jar -->
    <packaging>pom</packaging>

    <!-- 项目信息设置 Start -->
    <!-- 用户描述项目的名称，无关紧要的东西，可选 -->
    <name>platform</name>
    <!-- 写明开发团队的网站，无关紧要，可选 -->
    <!--<url></url>-->
    <!--项目的详细描述,Maven产生的文档用。当这个元素能够用HTML格式描述时（例如，CDATA中的文本会被解析器忽略，就可以包含HTML标签），不鼓励使用纯文本描述。如果你需要修改产生的web站点的索引页面，你应该修改你自己的索引页文件，而不是调整这里的文档。 -->
    <description>Demo project for Spring Boot</description>
    <!--项目创建年份，4位数字。当产生版权信息时需要使用这个值。 -->
    <inceptionYear>2019</inceptionYear>
    <!-- 项目信息设置 end -->


    <!-- 常量配置 -->
    <properties>
        <!--键值对，Properties可以在整个POM中使用，也可以作为触发条件。格式是<name>value</name>。 -->
        <java.version>1.8</java.version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

        <spring-boot.version>2.1.5.RELEASE</spring-boot.version>
        <!--<spring-cloud.version>Finchley.SR2</spring-cloud.version>-->
        <!--支持Spring Boot 2.1.X-->
        <spring-cloud.version>Greenwich.RELEASE</spring-cloud.version>

        <resilience4j.version>1.2.0</resilience4j.version>

        <validation-api.version>2.0.1.Final</validation-api.version>

        <commons.pool2.version>2.8.0</commons.pool2.version>
        <commons.lang3.version>3.9</commons.lang3.version>
        <commons.collections4.version>4.4</commons.collections4.version>
        <commons.beanutils.version>1.9.4</commons.beanutils.version>
        <commons.io.version>2.6</commons.io.version>
        <commons.logging.version>1.2</commons.logging.version>
        <commons.fileupload.version>1.4</commons.fileupload.version>
        <commons.codec.version>1.13</commons.codec.version>
        <guava.version>28.2-jre</guava.version>
        <uuid.version>3.2.0</uuid.version>

        <sftp.version>0.1.55</sftp.version>
        <parserhtml.version>1.12.1</parserhtml.version>
        <poi.version>4.1.1</poi.version>

        <slf4j.version>1.7.30</slf4j.version>
        <janino.version>3.1.0</janino.version>

        <fastjson.version>1.2.62</fastjson.version>
        <gson.version>2.8.6</gson.version>
        <jackson.version>2.10.1</jackson.version>

        <springboot.mybatis.version>2.1.1</springboot.mybatis.version>
        <springboot.pagehelper.version>1.2.13</springboot.pagehelper.version>

        <druid.version>1.1.21</druid.version>
        <mysql.connector.version>5.1.48</mysql.connector.version>

        <lombok.version>1.18.10</lombok.version>
        <mybatis.generator.version>1.3.7</mybatis.generator.version>

    </properties>


    <!-- 为子项目配置依赖信息 -->
    <!--继承自该项目的所有子项目的默认依赖信息。这部分的依赖信息不会被立即解析,而是当子项目声明一个依赖（必须描述groupID和artifactID信息），如果groupID和artifactID以外的一些信息没有描述，则通过groupID和artifactID匹配到这里的依赖，并使用这里的依赖信息。 -->
    <dependencyManagement>
        <dependencies>
            <!-- 继承 spring-boot 父类 -->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>${spring-boot.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <!-- spring cloud -->
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring-cloud.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <!-- 熔断器 resilience4j -->
            <dependency>
                <groupId>io.github.resilience4j</groupId>
                <artifactId>resilience4j-spring-boot2</artifactId>
                <version>${resilience4j.version}</version>
            </dependency>


            <!-- 校验框架validation -->
            <dependency>
                <groupId>javax.validation</groupId>
                <artifactId>validation-api</artifactId>
                <version>${validation-api.version}</version>
            </dependency>

            <!-- 日志依赖处理 start-->
            <!-- https://blog.csdn.net/J080624/article/details/80632121  -->
            <!-- 日志文件管理包，提高性能log输出性能（ slf4j + log4j/logback ），Logback也依赖janino -->
            <dependency>
                <groupId>org.slf4j</groupId>
                <artifactId>slf4j-api</artifactId>
                <version>${slf4j.version}</version>
            </dependency>
            <dependency>
                <groupId>org.codehaus.janino</groupId>
                <artifactId>commons-compiler</artifactId>
                <version>${janino.version}</version>
            </dependency>
            <dependency>
                <groupId>org.codehaus.janino</groupId>
                <artifactId>janino</artifactId>
                <version>${janino.version}</version>
            </dependency>
            <!-- 日志依赖处理 end-->

            <!-- ******************************* 常用依赖库 ********************************** -->
            <!-- 线程池 -->
            <dependency>
                <groupId>org.apache.commons</groupId>
                <artifactId>commons-pool2</artifactId>
                <version>${commons.pool2.version}</version>
            </dependency>
            <!-- 包含丰富的工具类如 StringUtils -->
            <dependency>
                <groupId>org.apache.commons</groupId>
                <artifactId>commons-lang3</artifactId>
                <version>${commons.lang3.version}</version>
            </dependency>
            <!-- 常用的集合操作，丰富的工具类 -->
            <dependency>
                <groupId>org.apache.commons</groupId>
                <artifactId>commons-collections4</artifactId>
                <version>${commons.collections4.version}</version>
            </dependency>
            <!-- 操作javabean的工具包 -->
            <dependency>
                <groupId>commons-beanutils</groupId>
                <artifactId>commons-beanutils</artifactId>
                <version>${commons.beanutils.version}</version>
                <exclusions>
                    <exclusion>
                        <groupId>commons-collections</groupId>
                        <artifactId>commons-collections</artifactId>
                    </exclusion>
                    <exclusion>
                        <groupId>commons-logging</groupId>
                        <artifactId>commons-logging</artifactId>
                    </exclusion>
                </exclusions>
            </dependency>
            <!-- 包含一些通用的编码解码算法. 如：MD5、SHA1、Base64等 -->
            <dependency>
                <groupId>commons-codec</groupId>
                <artifactId>commons-codec</artifactId>
                <version>${commons.codec.version}</version>
            </dependency>
            <!-- 针对开发IO流功能的工具类库 -->
            <dependency>
                <groupId>commons-io</groupId>
                <artifactId>commons-io</artifactId>
                <version>${commons.io.version}</version>
            </dependency>
            <dependency>
                <groupId>commons-logging</groupId>
                <artifactId>commons-logging</artifactId>
                <version>${commons.logging.version}</version>
            </dependency>
            <!-- 文件上传 -->
            <dependency>
                <groupId>commons-fileupload</groupId>
                <artifactId>commons-fileupload</artifactId>
                <version>${commons.fileupload.version}</version>
                <exclusions>
                    <exclusion>
                        <groupId>commons-io</groupId>
                        <artifactId>commons-io</artifactId>
                    </exclusion>
                </exclusions>
            </dependency>
            <!-- Guava工程包含了若干被Google的Java项目广泛依赖的核心库. 集合[collections] 、缓存[caching] 、原生类型支持[primitives support] 、并发库[concurrency libraries] 、通用注解[common annotations] 、字符串处理[string processing] 、I/O 等等。-->
            <dependency>
                <groupId>com.google.guava</groupId>
                <artifactId>guava</artifactId>
                <version>${guava.version}</version>
            </dependency>
            <!-- UUID generator -->
            <dependency>
                <groupId>com.fasterxml.uuid</groupId>
                <artifactId>java-uuid-generator</artifactId>
                <version>${uuid.version}</version>
            </dependency>
            <!-- Sftp 文件上传与下载  -->
            <dependency>
                <groupId>com.jcraft</groupId>
                <artifactId>jsch</artifactId>
                <version>${sftp.version}</version>
            </dependency>
            <!-- 解析Excel start -->
            <dependency>
                <groupId>org.apache.poi</groupId>
                <artifactId>poi</artifactId>
                <version>${poi.version}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.poi</groupId>
                <artifactId>poi-ooxml</artifactId>
                <version>${poi.version}</version>
            </dependency>
            <!-- 解析Excel end -->
            <!-- HTML 解析 jsoup HTML parser library @ https://jsoup.org/ -->
            <dependency>
                <groupId>org.jsoup</groupId>
                <artifactId>jsoup</artifactId>
                <version>${parserhtml.version}</version>
            </dependency>

            <!-- json处理  start -->
            <dependency>
                <groupId>com.google.code.gson</groupId>
                <artifactId>gson</artifactId>
                <version>${gson.version}</version>
            </dependency>
            <dependency>
                <groupId>com.alibaba</groupId>
                <artifactId>fastjson</artifactId>
                <version>${fastjson.version}</version>
            </dependency>
            <dependency>
                <groupId>com.fasterxml.jackson.core</groupId>
                <artifactId>jackson-databind</artifactId>
                <version>${jackson.version}</version>
            </dependency>
            <dependency>
                <groupId>com.fasterxml.jackson.core</groupId>
                <artifactId>jackson-core</artifactId>
                <version>${jackson.version}</version>
            </dependency>
            <dependency>
                <groupId>com.fasterxml.jackson.core</groupId>
                <artifactId>jackson-annotations</artifactId>
                <version>${jackson.version}</version>
            </dependency>
            <dependency>
                <groupId>com.fasterxml.jackson.dataformat</groupId>
                <artifactId>jackson-dataformat-xml</artifactId>
                <version>${jackson.version}</version>
            </dependency>
            <!-- json处理  end -->

            <!-- 数据连接池 -->
            <!-- druid -->
            <dependency>
                <groupId>com.alibaba</groupId>
                <artifactId>druid-spring-boot-starter</artifactId>
                <version>${druid.version}</version>
            </dependency>

            <!-- 数据库  start-->
            <!-- JDBC driver-->
            <!-- JDBC Type 4 driver for MySQL Server 8.0, 5.7, 5.6, and 5.5 -->
            <dependency>
                <groupId>mysql</groupId>
                <artifactId>mysql-connector-java</artifactId>
                <version>8.0.12</version>
            </dependency>
            <!-- JDBC Type 4 driver for all MariaDB servers and MySQL Server 8.0, 5.7, 5.6, and 5.5.3 -->
            <dependency>
                <groupId>org.mariadb.jdbc</groupId>
                <artifactId>mariadb-java-client</artifactId>
                <version>2.4.0</version>
            </dependency>
            <!-- JDBC Type 4 driver for DB2 Server 11.1 -->
            <dependency>
                <groupId>com.ibm.db2.jcc</groupId>
                <artifactId>db2jcc4</artifactId>
                <version>11.1</version>
            </dependency>
            <!-- JDBC Type 3 driver for DB2 Server 11.1
            <dependency>
                <groupId>com.ibm.db2.jcc</groupId>
                <artifactId>db2jcc</artifactId>
                <version>11.1</version>
            </dependency>
            -->
            <!-- JDBC  driver for Oracle Database 18.3 -->
            <dependency>
                <groupId>com.oracle.jdbc</groupId>
                <artifactId>ojdbc8</artifactId>
                <version>18.3</version>
            </dependency>
            <!-- JDBC  for h2 Database  -->
            <dependency>
                <groupId>com.h2database</groupId>
                <artifactId>h2</artifactId>
                <version>1.4.199</version>
                <scope>test</scope>
            </dependency>
            <!-- 数据库  end-->

            <dependency>
                <groupId>org.mybatis.spring.boot</groupId>
                <artifactId>mybatis-spring-boot-starter</artifactId>
                <version>${springboot.mybatis.version}</version>
            </dependency>
            <dependency>
                <groupId>com.github.pagehelper</groupId>
                <artifactId>pagehelper-spring-boot-starter</artifactId>
                <version>${springboot.pagehelper.version}</version>
            </dependency>
        </dependencies>

    </dependencyManagement>


    <!--模块（有时称作子项目）被构建成项目的一部分。列出的每个模块元素是指向该模块的目录的相对路径 -->
    <!-- Ps：继承和模块的区别：继承父不知子，但子知父。模块父知子，但子不知父。所以在具体的项目中一般都是继承和模块融合使用。 -->
    <modules>
        <module>common</module>
        <module>cloud</module>
        <module>consul-gateway</module>
    </modules>

    <!--依赖关系 该元素描述了项目相关的所有依赖。这些依赖组成了项目构建过程中的一个个环节。它们自动从项目定义的仓库中下载。要获取更多信息，请看项目依赖机制。 -->
    <dependencies>
        <!-- 支持 lombok -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>${lombok.version}</version>
            <scope>provided</scope>
        </dependency>
        <!-- 支持 junit4 start -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.12</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.hamcrest</groupId>
            <artifactId>hamcrest-core</artifactId>
            <version>2.1</version>
            <scope>test</scope>
        </dependency>
        <!-- 支持 junit4 end -->

    </dependencies>


    <!-- 构建过程的设置 Start -->
    <!-- 注意体会插件配置的顺序，这正体现了一个maven的运行流程 -->
    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
            <!-- 清理插件 -->
            <plugin>
                <artifactId>maven-clean-plugin</artifactId>
                <version>3.1.0</version>
                <configuration>
                    <!-- 忽略错误 默认为true， -->
                    <failOnError>true</failOnError>
                    <!-- skip 跳过clean阶段 默认为false -->
                    <skip>false</skip>
                </configuration>
            </plugin>
            <!--  maven-resources-plugin 资源插件 -->

            <!-- 编译插件的使用 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.0</version>
                <configuration>
                    <!-- 源代码使用的jdk版本 -->
                    <source>${java.version}</source>
                    <!-- 构建后生成class文件jdk版本 -->
                    <target>${java.version}</target>
                    <encoding>UTF-8</encoding>
                </configuration>
            </plugin>
            <!-- maven-surefire-plugin 单元测试插件 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.22.1</version>
                <configuration>
                    <!-- 跳过测试阶段 -->
                    <skipTests>true</skipTests>
                </configuration>
            </plugin>
            <!-- war包插件 建议配置编码格式和打包名称 -->

            <!-- maven-install-plugin插件一般不需要配置 -->

            <!-- 部署插件 -->
            <plugin>
                <artifactId>maven-deploy-plugin</artifactId>
                <version>2.8.2</version>
                <executions>
                    <execution>
                        <id>default-deploy</id>
                        <phase>deploy</phase>
                        <goals>
                            <goal>deploy</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
    <!-- 构建过程的设置 end -->


    <!-- 环境设置 end -->
</project>