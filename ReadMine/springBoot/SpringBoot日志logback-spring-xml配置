<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/2002/xmlspec/dtd/2.10/xmlspec.dtd">
<!--
    Copyright 2010-2011 The myBatis Team
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
        http://www.apache.org/licenses/LICENSE-2.0
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->

<!--  springboot推荐使用	logback-spring.xml ,而不是  logback.xml 文件  -->
<!--  参考：	http://blog.csdn.net/gwd1154978352/article/details/78344091  
			http://m.blog.csdn.net/qing_mei_xiu/article/details/75083857
-->
<!-- 
	日志初始化在ApplicationContext创建之前，所以@PropertySources加载的配置是读取不到的，
	而系统环境变量、Spring Environment及application,bootstrap配置文件中的信息可以读取到。
 -->
<!-- springProperty: 读取当前应用Environment中的属性	
	官方文档指明，需要使用<springProperty>,才可使用application.properties（或application.yml）中的值
-->
<!-- 
根节点<configuration>包含的属性
	scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
	scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。
		当scan为true时，此属性生效。默认的时间间隔为1分钟。
	debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。
	
根节点<configuration>的子节点：
	<configuration>下面一共有2个属性，3个子节点，分别是：
	属性一：设置上下文名称<contextName>
		每个logger都关联到logger上下文，默认上下文名称为“default”。但可以使用设置成其他名字，
		用于区分不同应用程序的记录。一旦设置，不能修改,可以通过%contextName来打印日志上下文名称。
		例如：<contextName>logback</contextName> 
	属性二：设置变量<property>
		用来定义变量值的标签， 有两个属性，name和value；其中name的值是变量的名称，value的值时变量定义的值。
		通过定义的值会被插入到logger上下文中。定义变量后，可以使“${}”来使用变量。
		例如：<property name="log.path" value="E:\\logback.log" />  
	子节点一<appender>
		appender用来格式化日志输出节点，有俩个属性name和class， class用来指定哪种输出策略，常用就是控制台输出策略和文件输出策略。
		##控制台输出ConsoleAppender
			日志级别从低到高分为TRACE < DEBUG < INFO < WARN < ERROR < FATAL，如果设置为WARN，则低于WARN的信息都不会输出。
			Spring Boot中默认配置ERROR、WARN和INFO级别的日志输出到控制台。
		<encoder>表示对日志进行编码：
			%d{yyyy-MM-dd HH:mm:ss.SSS}		日志输出时间
			%thread			输出日志的进程名字，这在Web应用以及异步任务处理中很有用
			%-5level		日志级别，并且使用5个字符靠左对齐
			%logger{50}		日志输出者的名字
			%msg			日志消息
			%n				平台的换行符
		ThresholdFilter为系统定义的拦截器，例如我们用ThresholdFilter来过滤掉ERROR级别以下的日志不输出到文件中。如果不用记得注释掉，不然你控制台会发现没日志~
 		##输出到文件RollingFileAppender(定义日志文件的存储地址 勿在 LogBack 的配置中使用相对路径)
 		RollingFileAppender用于切分文件日志：日志输出到文件，随着应用的运行时间越来越长，日志也会增长的越来越多，将他们输出到同一个文件并非一个好办法。
 		<rollingPolicy>
 			<fileNamePattern>	定义了日志的切分方式,每天%d{yyyy-MM-dd}，也可以使用%d{yyyy-MM-dd_HH-mm}来定义精确到分的日志切分方式；
 			<maxHistory>		表示只保留最近XX天的日志，以防止日志填满整个磁盘空间。
 			<totalSizeCap>		用来指定日志文件的上限大小，例如设置为1GB的话，那么到了这个值，就会删除旧的日志。
 		日志记录采用分级记录，级别与日志文件名相对应，不同级别的日志信息记录到不同的日志文件中,
 			例如：error级别记录到log_error_xxx.log或log_error.log（该文件为当前记录的日志文件），而log_error_xxx.log为归档日志，
 		日志文件按日期记录，同一天内，若日志文件大小等于或大于2M，则按0、1、2...顺序分别命名,
 			例如log-level-2013-12-21.0.log
 	子节点二<root>
 		root节点是必选节点，用来指定最基础的日志输出级别，只有一个level属性。
 			level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，不能设置为INHERITED或者同义词NULL。
			默认是DEBUG。
			可以包含零个或多个元素，标识这个appender将会添加到这个loger。
	子节点三<loger>
		<loger>用来设置某一个包或者具体的某一个类的日志打印级别、以及指定<appender>。
		<loger>仅有一个name属性，一个可选的level和一个可选的addtivity属性。
			name:	用来指定受此loger约束的某一个包或者具体的某一个类。
			level:	用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，
		还有一个特殊值INHERITED或者同义词NULL，代表强制执行上级的级别。如果未设置此属性，那么当前loger将会继承上级的级别。
			addtivity:	是否向上级loger传递打印信息。默认是true。	
		loger在实际使用的时候有两种情况：
			第一种：带有loger的配置，不指定级别，不指定appender
			第二种：带有多个loger的配置，指定级别，指定appender

多环境日志输出
	据不同环境（prod:生产环境，uat:准生产环境，test:测试环境，dev:开发环境）来定义不同的日志输出，
	在 logback-spring.xml中使用 springProfile 节点来定义，方法如下：	
		测试环境+开发环境. 多个使用逗号隔开. 	
		<springProfile name="test,dev">
	    	<logger name="com.dudu.controller" level="info" />
		</springProfile>
		生产环境
		<springProfile name="prod">
	    	<logger name="com.dudu.controller" level="ERROR" />
		</springProfile>		
		可以启动服务的时候指定 profile （如不指定使用默认），如指定prod 的方式为：
		java -jar xxx.jar –spring.profiles.active=prod
-->
<configuration debug="false">

	<!-- 设置上下文名称	 -->
	<contextName>logback</contextName>
	
	<!-- springProperty: 读取当前应用Environment中的属性	
		官方文档指明，需要使用<springProperty>,才可使用application.properties（或application.yml）中的值
	 -->
    <springProperty scope="context" name="APP_NAME" source="spring.application.name"/>
	<springProperty scope="context" name="DEFAULT_APP_PORT" source="spring.application.port"/> 
	<!--     
    <springProperty scope="context" name="APP_PORT" source="server.port"/>
	-->
    <springProperty scope="context" name="LOG_PATH_WINDOWS" source="log.path.windows"/>
    <springProperty scope="context" name="LOG_PATH_OTHER_OS" source="log.path.other.os"/>


	<!-- property: 读取系统环境属性  -->
    <property name="OS_NAME" value="${os.name}"/>
    <property name="APP_NAME" value="${APP_NAME:-system}" />
    <property name="APP_PORT" value="${APP_PORT:-${DEFAULT_APP_PORT}}" />
    
    <property name="LOG_PATH_WINDOWS" value="${LOG_PATH_WINDOWS}" />
    <property name="LOG_PATH_OTHER_OS" value="${LOG_PATH_OTHER_OS}" />
    
  	<!--
    <property name="APP_NAME" value="${APP_NAME}" />
    <property name="APP_PORT" value="${APP_PORT}" />
    -->
    <if condition='property("OS_NAME").contains("Windows")'>
        <then>
            <property name="LOG_PATH" value="${LOG_PATH:-${LOG_PATH_WINDOWS}}" />
        </then>
        <else>
            <property name="LOG_PATH" value="${LOG_PATH:-${LOG_PATH_OTHER_OS}}" />
        </else>
    </if>       
 
  	<!-- 控制台彩色日志 （ansi）
  		1. eclipse需要安装插件ANSIConsole
  			  	Help -> Install New Software.. 填入一下信息：
   					Name : 	color plugin
   					Location: 	http://www.mihai-nita.net/eclipse
   		2. spring boot 中  application.properties或application.yml配置参数
   			spring.output.ansi.enabled=ALWAYS
			console-available=true	
		3. 	加载彩色日志渲染类，并在控制台及root中设置	
  	-->
    <!-- 彩色日志依赖的渲染类 -->
    <conversionRule conversionWord="clr" 
    	converterClass="org.springframework.boot.logging.logback.ColorConverter" />
    <conversionRule conversionWord="wex" 
    	converterClass="org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter" />
    <conversionRule conversionWord="wEx"
        converterClass="org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter" />
    <!-- 彩色日志格式 -->
    <property name="CONSOLE_LOG_PATTERN"
              value="${CONSOLE_LOG_PATTERN:-%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}" />
           
    <!-- 控制台输出 -->
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
     	<!--encoder 默认配置为PatternLayoutEncoder，可将标签中的"class=" 去掉-->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
        	<!-- 彩色日志
        	 <pattern>${CONSOLE_LOG_PATTERN}</pattern>
        	-->
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>
       		<!-- 编码格式
       		<charset>UTF-8</charset>
       		-->
	        <!--此日志appender是为开发使用，只配置DEBUG级别，控制台输出的日志级别是大于或等于此级别的日志信息-->
	        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
	            <level>DEBUG</level>
	        </filter>       		
        </encoder>
    </appender>
    
    <!-- 日志记录器，日期滚动记录 -->    
    <!-- 按照每天生成日志文件 -->
    <appender name="FILE-INFO" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- 正在记录的日志文件的路径及文件名 -->    
        <file>${LOG_PATH}/${APP_NAME}-${APP_PORT}/LOG_INFO.log</file>
        <!-- 日志记录器的滚动策略，按日期，按大小记录 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
         	<!-- 归档的日志文件的路径，例如今天是2013-12-21日志，当前写的日志文件路径为file节点指定，可以将此文件与file指定文件路径设置为不同路径，从而将当前日志文件或归档日志文件置不同的目录。
            	而2013-12-21的日志文件在由fileNamePattern指定。%d{yyyy-MM-dd}指定日期格式，%i指定索引
            -->
            <FileNamePattern>${LOG_PATH}/${APP_NAME}-${APP_PORT}/LOG_INFO_%d{yyyy-MM-dd}.%i.log</FileNamePattern>
			<!-- 除按日志记录之外，还配置了日志文件不能超过10M，若超过10M，日志文件会以索引0开始，
            	命名日志文件，例如log-error-2013-12-21.0.log 
            -->            
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>        
            <!-- 存储时间	 -->
            <MaxHistory>30</MaxHistory>
        </rollingPolicy>
        <!-- 追加方式记录日志 -->
        <append>true</append>
        <!-- 日志文件的格式 -->        
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
        	<!--  
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} Line:%-3L - %msg%n</pattern>
            -->
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>
        	<charset>UTF-8</charset>
        </encoder>
        <!-- 此日志文件只记录INFO级别的 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>INFO</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>       

    <!--myibatis log configure 
    <logger name="com.apache.ibatis" level="DEBUG" />
	-->
    <!-- mapper 至关重要如果没有，就无法输出sql语句
    <logger name="org.sccba.zm" level="DEBUG"/>
    -->
 
    <!-- show parameters for hibernate sql 专为 Hibernate 定制 -->
    <!--<logger name="org.hibernate.type.descriptor.sql.BasicBinder"  level="TRACE" />-->
    <!--<logger name="org.hibernate.type.descriptor.sql.BasicExtractor"  level="DEBUG" />-->
    <!--<logger name="org.hibernate.SQL" level="DEBUG" />-->
    <!--<logger name="org.hibernate.engine.QueryParameters" level="DEBUG" />-->
    <!--<logger name="org.hibernate.engine.query.HQLQueryPlan" level="DEBUG" />-->
    
    <!-- jdbc操作日志 
    <logger name="java.sql.Connection" level="DEBUG" />
    <logger name="java.sql.Statement" level="DEBUG" />
    <logger name="java.sql.PreparedStatement" level="DEBUG" />
    -->
        
    <!-- spring -->
    <logger name="org.springframework.web" level="ERROR" />
    <! --  用到则设置
    <logger name="org.springframework.aop.aspectj" level="ERROR"/>  
    <logger name="org.springframework.security" level="WARN"/>
    <logger name="org.springframework.cache" level="WARN"/>  
    <logger name="org.springframework.data.mybatis" level="DEBUG"/>
    -->
    <!--  项目中设置的日志记录	-->
    <logger name="com.cxy.bootdemo" level="info" />
    

    <!-- 日志输出级别 -->
    <!-- 生产环境下，将此级别配置为适合的级别，以免日志文件太多或影响程序性能 -->
    <root level="info">
        <appender-ref ref="CONSOLE" />
         
        <appender-ref ref="FILE-INFO" />
        <!--
        <appender-ref ref="FILE-DEBUG" />
        <appender-ref ref="FILE-WARN" />
        <appender-ref ref="FILE-ERROR" />
        -->
    </root>
    
     <!-- 测试环境+开发环境. 多个使用逗号隔开. -->
     <springProfile name="test,dev">
        <logger name="org.springframework.web" level="INFO"/>
        <logger name="com.cxy.bootdemo" level="INFO" />
    </springProfile>
 
    <!-- 准生产环境 -->
    <springProfile name="uat">
        <logger name="org.springframework.web" level="DEBUG"/>
        <logger name="com.cxy.bootdemo" level="DEBUG" />
    </springProfile>
    
    <!-- 生产环境 -->
    <springProfile name="prod">
        <logger name="org.springframework.web" level="ERROR"/>
        <logger name="com.cxy.bootdemo" level="ERROR" />
    </springProfile>
    
</configuration>
