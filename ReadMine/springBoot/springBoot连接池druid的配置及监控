
spring-boot 连接池 druid 的配置及监控

	参考网站：
		Druid：	https://github.com/alibaba/druid
		Druid-SpringBoot-Starter： https://github.com/alibaba/druid/tree/master/druid-spring-boot-starter
		http://blog.csdn.net/zl18310999566/article/details/54017279
		
		
连接池 Druid
     简介
	Druid是Java中最好的数据库连接池，并且能够提供强大的监控和扩展功能。业界把Druid和HikariCP做对比后，虽说HikarCP的性能比Druid高，但是因为Druid包括很多维度的统计和分析功能，所以也是大家学则使用的主要原因。
	Druid是阿里巴巴开源平台上的一个项目，整个项目由数据库连接池、插件框架和SQL解析器组成。该项目主要是为了扩展JDBC的一些限制，可以让程序员实现一些特殊的需求，比如向密钥服务请求凭证、统计SQL信息、SQL性能收集、SQL注入检查、SQL翻译等，程序员可以通过定制来实现自己需要的功能。 
  Druid可以做什么
	可以监控数据库访问性能，Druid内置提供了一个功能强大的StatFilter插件，能够详细统计SQL的执行性能，这对于线上分析数据库访问性能有帮助。 
	替换DBCP和C3P0。Druid提供了一个高效、功能强大、可扩展性好的数据库连接池。 
	数据库密码加密。直接把数据库密码写在配置文件中，这是不好的行为，容易导致安全问题。DruidDruiver和DruidDataSource都支持PasswordCallback。 
	SQL执行日志，Druid提供了不同的LogFilter，能够支持Common-Logging、Log4j和JdkLog，你可以按需要选择相应的LogFilter，监控你应用的数据库访问情况。 
	更多关于Druid的介绍可以看http://www.iteye.com/magazines/90，是对主要负责人的采访。


Spring-boot 配置 Druid
     添加maven依赖
	在pom.xml配置文件中添加如下依赖
		<dependency>  
	       <groupId>com.alibaba</groupId>  
	       <artifactId>druid</artifactId>  
	       <version>${druid-version}</version>  
		</dependency> 
	版本 可在 Maven仓库查找公共的仓库地址: http://www.mvnrepository.com/artifact/com.alibaba/druid
    配置druid
	spring-boot目前支持的连接池有dbcp，dbcp2，hikari，tomcat的jdbc（这也是默认使用的），并不支持druid，不过目前阿里团队提供Druid-SpringBoot-Starter支持选项。
	application.properties配置：
	    参考https://github.com/alibaba/druid/wiki/DruidDataSource%E9%85%8D%E7%BD%AE%E5%B1%9E%E6%80%A7%E5%88%97%E8%A1%A8
		### druid setting ###  
		spring.datasource.type=com.alibaba.druid.pool.DruidDataSource  
		spring.datasource.url=jdbc:mysql://ip:3306/jikefriend?useUnicode=true&characterEncoding=utf-8  
		spring.datasource.username=root  
		spring.datasource.password=  
		
		### 不支持的补充配置 ###  
		# 根据url自动识别  这一项可配可不配，如果不配置druid会根据url自动识别dbType，然后选择相应的driverClassName
		spring.datasource.driverClassName=com.mysql.jdbc.Driver
		
		# 初始化连接池大小，最小，最大  
		spring.datasource.initialSize=1  
		# maxIdle 默认值为8  但已经不再使用，配置了也没效果
		# minIdle 无默认值    最小连接池数量
		spring.datasource.minIdle=1
		# 最大连接池数量 默认值为8  
		spring.datasource.maxActive=20  
		# 配置获取连接等待超时的时间 ，以毫秒为单位 
		spring.datasource.maxWait=60000  
		# 配置一个连接在池中最小生存的时间，单位是毫秒  
		spring.datasource.minEvictableIdleTimeMillis=300000  
		
		# SQL查询,用来验证从连接池取出的连接,在将连接返回给调用者之前.如果指定, 则查询必须是一个SQL SELECT并且必须返回至少一行记录，Oracle请使用select 1 from dual
		spring.datasource.validationQuery=SELECT 'x'
		# testOnBorrow  默认值为 true 指明是否在从池中取出连接前进行检验,如果检验失败,则从池中去除连接并尝试取出另一个.
		# 注意: 设置为true后如果要生效,validationQuery参数必须设置为非空字符串
		spring.datasource.testOnBorrow=false  
		# testOnReturn  默认值为 false  指明是否在归还到池中前进行检验
		# 注意: 设置为true后如果要生效,validationQuery参数必须设置为非空字符串
		spring.datasource.testOnReturn=false  
		# testWhileIdle  默认值为 false  指明连接是否被空闲连接回收器(如果有)进行检验.如果检测失败,则连接将被从池中去除.注意: 设置为true后如果要生效,validationQuery参数必须设置为非空字符串
		# 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
		spring.datasource.testWhileIdle=true	
		# timeBetweenEvictionRunsMillis 默认值为-1， 在空闲连接回收器线程运行期间休眠的时间值,以毫秒为单位. 如果设置为非正数,则不运行空闲连接回收器线程
		# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒  
		spring.datasource.timeBetweenEvictionRunsMillis=60000  
		
		# numTestsPerEvictionRun  默认值为3   在每次空闲连接回收器线程(如果有)运行时检查的连接数量
		# minEvictableIdleTimeMillis  默认值为1000 * 60 * 30      连接在池中保持空闲而不被空闲连接回收器线程(如果有)回收的最小时间值，单位毫秒
		# 是否自动回收超时连接，removeAbandoned  默认值为false 
		# 标记是否删除泄露的连接,如果他们超过了removeAbandonedTimout的限制. 如果设置为true, 连接被认为是被泄露并且可以被删除,如果空闲时间超过removeAbandonedTimeout. 设置为true可以为写法糟糕的没有关闭连接的程序修复数据库连接.
		spring.datasource.removeAbandoned=true  
		# 超时连接的超时时间(以秒数为单位) removeAbandonedTimeout   默认值为300  	泄露的连接可以被删除的超时值, 单位秒
		spring.datasource.removeAbandonedTimeout=180
		# logAbandoned  默认为false  标记当Statement或连接被泄露时是否打印程序的stack traces日志。被泄露的Statements和连接的日志添加在每个连接打开或者生成新的Statement,因为需要生成stack trace
		spring.datasource.logAbandoned=true
		
		# 打开PSCache，并且指定每个连接上PSCache的大小  
		# 是否缓存preparedStatement，也就是PSCache。默认为false，PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。
		spring.datasource.poolPreparedStatements=false  
		# maxPoolPreparedStatementPerConnectionSize 默认为-1，要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100
		spring.datasource.maxPoolPreparedStatementPerConnectionSize=-1  
		
		# 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙，slf4j可替换为log4j  
		# 属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：监控统计用的filter:stat  日志用的filter:log4j 防御sql注入的filter:wall
		# https://github.com/alibaba/druid/wiki/%E5%86%85%E7%BD%AEFilter%E7%9A%84%E5%88%AB%E5%90%8D
		spring.datasource.filters=stat,wall,slf4j
		# proxyFilters	类型是List<com.alibaba.druid.filter.Filter>，如果同时配置了filters和proxyFilters，是组合关系，并非替换关系
		
		# 通过connectProperties属性来打开mergeSql功能；慢SQL记录
		spring.datasource.connectionProperties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
		
		# 合并多个DruidDataSource的监控数据
		#spring.datasource.useGlobalDataSourceStat=true
		
    由于很多属性并不支持，所以需要进行配置信息的定制
	import com.alibaba.druid.pool.DruidDataSource;  
	import org.slf4j.Logger;  
	import org.slf4j.LoggerFactory;  
	import org.springframework.beans.factory.annotation.Value;  
	import org.springframework.context.annotation.Bean;  
	import org.springframework.context.annotation.Configuration;  
	import org.springframework.context.annotation.Primary;  
	  
	import javax.sql.DataSource;  
	import java.sql.SQLException;  
	  
	@Configuration  
	public class DruidConfig {  
	  
	    private static final Logger LOGGER = LoggerFactory.getLogger(DruidConfig.class);  
	  
	    @Value("${spring.datasource.driverClassName}")  
	    private String driverClassName;  
	    @Value("${spring.datasource.url}")  
	    private String url;  
	    @Value("${spring.datasource.username}")  
	    private String username;  
	    @Value("${spring.datasource.password}")  
	    private String password;  
	    @Value("${spring.datasource.initialSize}")  
	    private int initialSize;  
	    @Value("${spring.datasource.minIdle}")  
	    private int minIdle;  
	    @Value("${spring.datasource.maxActive}")  
	    private int maxActive;  
	    @Value("${spring.datasource.maxWait}")  
	    private int maxWait;  
	    @Value("${spring.datasource.validationQuery}")  
	    private String validationQuery;  
	    @Value("${spring.datasource.testOnBorrow}")  
	    private boolean testOnBorrow;  
	    @Value("${spring.datasource.testOnReturn}")  
	    private boolean testOnReturn;  
	    @Value("${spring.datasource.testWhileIdle}")  
	    private boolean testWhileIdle;  
	    @Value("${spring.datasource.timeBetweenEvictionRunsMillis}")  
	    private int timeBetweenEvictionRunsMillis;  
	    @Value("${spring.datasource.minEvictableIdleTimeMillis}")  
	    private int minEvictableIdleTimeMillis;  
	    @Value("${spring.datasource.removeAbandoned}")  
	    private boolean removeAbandoned;  
	    @Value("${spring.datasource.removeAbandonedTimeout}")  
	    private int removeAbandonedTimeout;  
	    @Value("${spring.datasource.logAbandoned}")  
	    private boolean logAbandoned;  
	    @Value("${spring.datasource.filters}")  
	    private String filters;  
	    @Value("${spring.datasource.poolPreparedStatements}")  
	    private boolean poolPreparedStatements;  
	    @Value("${spring.datasource.maxPoolPreparedStatementPerConnectionSize}")  
	    private int maxPoolPreparedStatementPerConnectionSize;  
	  
	   	// 启动springboot时初始化连接池
	 	// @Bean(name = "dataSource", destroyMethod = "close", initMethod = "init")   
	    @Bean
	    @Primary  
	    public DataSource dataSource() {  
	        DruidDataSource datasource = new DruidDataSource();  
	  
	        datasource.setDriverClassName(driverClassName);  
	        datasource.setUrl(url);  
	        datasource.setUsername(username);  
	        datasource.setPassword(password);  
	        //其它配置  
	        datasource.setInitialSize(initialSize);  
	        datasource.setMinIdle(minIdle);  
	        datasource.setMaxActive(maxActive);  
	        datasource.setMaxWait(maxWait);  
	        datasource.setTimeBetweenEvictionRunsMillis(timeBetweenEvictionRunsMillis);  
	        datasource.setMinEvictableIdleTimeMillis(minEvictableIdleTimeMillis);  
	        datasource.setValidationQuery(validationQuery);  
	        datasource.setTestWhileIdle(testWhileIdle);  
	        datasource.setTestOnBorrow(testOnBorrow);  
	        datasource.setTestOnReturn(testOnReturn);  
	        datasource.setPoolPreparedStatements(poolPreparedStatements);  
	        datasource.setMaxPoolPreparedStatementPerConnectionSize(maxPoolPreparedStatementPerConnectionSize);  
	        try {  
	            datasource.setFilters(filters);  
	        } catch (SQLException e) {  
	            LOGGER.error("druid configuration initialization filter", e);  
	        }  
	        return datasource;  
	    }  
	  
	}  
	其中，DruidDBConfig类被@Configuration标注，用作配置信息； DataSource对象被@Bean声明，为Spring容器所管理， @Primary表示这里定义的DataSource将覆盖其他来源的DataSource。

    配置druid的监控（方式一：注解形式）
	配置servlet
		import com.alibaba.druid.support.http.StatViewServlet;  
		import javax.servlet.annotation.WebInitParam;  
		import javax.servlet.annotation.WebServlet;  
		  
		@SuppressWarnings("serial")  
		@WebServlet(urlPatterns="/druid/*",  
		        initParams={  
		                /** 白名单，如果不配置或value为空，则允许所有 */  
		                @WebInitParam(name="allow",value="127.0.0.1,192.0.0.1"),  
		                /** 黑名单，与白名单存在相同IP时，优先于白名单 */  
		                @WebInitParam(name="deny",value="192.0.0.1"),  
		                /** 用户名 */  
		                @WebInitParam(name="loginUsername",value="jikefriend"),  
		                /** 密码 */  
		                @WebInitParam(name="loginPassword",value="jikefriend"),  
		                /** 禁用HTML页面上的“Reset All”功能   */  
		                @WebInitParam(name="resetEnable",value="false")  
		        })  
		public class DruidStatViewServlet extends StatViewServlet {  
		}  
	配置filter
		import com.alibaba.druid.support.http.WebStatFilter;  
		import javax.servlet.annotation.WebFilter;  
		import javax.servlet.annotation.WebInitParam;  
		@WebFilter(  
		        filterName="druidWebStatFilter",urlPatterns="/*",  
		        initParams={  
		                /** 忽略资源 */  
		                @WebInitParam(name="exclusions", value="*.js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/*")  
		        }  
		)  
		public class DruidStatFilter extends WebStatFilter {  
		}  
	这里需要注意的，此时如果直接启动项目，在浏览器中输入http://127.0.0.1:8080/druid/index.html会报404，需要在启动类上加上@ServletComponentScan注解，才能够在启动的时候扫描到自己编写的servlet和filter。

     配置druid的监控（方式二：代码形式）
	第二种方式则不需要@ServletComponentScan注解，我们将代码加入到DruidConfig.java中
		@Bean
		public ServletRegistrationBean druidServlet() {
			logger.info("init Druid Servlet Configuration ");
			ServletRegistrationBean servletRegistrationBean = new ServletRegistrationBean(new StatViewServlet(), "/druid/*");
			// 添加初始化参数：initParams
			// IP白名单(没有配置或者为空，则允许所有访问)
			// servletRegistrationBean.addInitParameter("allow", "192.168.2.25,127.0.0.1");
			// IP黑名单(共同存在时，deny优先于allow)
			// servletRegistrationBean.addInitParameter("deny", "192.168.1.100");
			// 控制台管理用户
			servletRegistrationBean.addInitParameter("loginUsername", "dbname");
			servletRegistrationBean.addInitParameter("loginPassword", "dbpwd");
			// 是否能够重置数据 禁用HTML页面上的“Reset All”功能
			servletRegistrationBean.addInitParameter("resetEnable", "false");
			return servletRegistrationBean;
		}
	
		@Bean
		public FilterRegistrationBean filterRegistrationBean() {
			FilterRegistrationBean filterRegistrationBean = new FilterRegistrationBean(new WebStatFilter());
			// 添加过滤规则.
			filterRegistrationBean.addUrlPatterns("/*");
			// 添加不需要忽略的格式信息.
			filterRegistrationBean.addInitParameter("exclusions", "*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*");
			return filterRegistrationBean;
		}
		
    测试
	启动项目，在浏览器输入http://127.0.0.1:8080/druid/

